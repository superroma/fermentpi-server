{
  "name": "stepup",
  "version": "1.1.2",
  "description": "A simple control-flow library for Node that makes parallel execution, serial execution, and error handling painless.",
  "homepage": "http://github.com/CrabDude/stepup",
  "repository": {
    "type": "git",
    "url": "git://github.com/CrabDude/stepup.git"
  },
  "author": {
    "name": "Adam Crabtree",
    "email": "dude@noderiety.com"
  },
  "main": "lib/stepup",
  "engines": {
    "node": ">=0.2.0"
  },
  "dependencies": {
    "trycatch": "~1.0.3"
  },
  "devDependencies": {
    "mocha": "~1.6.0",
    "chai": "~1.3.0",
    "survey": "~0.2.2"
  },
  "keywords": [
    "error",
    "exception",
    "control",
    "flow",
    "async",
    "series"
  ],
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "scripts": {
    "test": "mocha --reporter spec",
    "bench": "survey ./bench/stepup"
  },
  "license": "MIT",
  "readme": "# stepup\n\nA simple control-flow library for node.js that makes parallel execution, serial execution, and error handling painless.\n\n## Install\n\n    npm install stepup\n\n## Basic Usage\n\n_For a complete overview of functionality, [see the unit tests](https://github.com/CrabDude/stepup/blob/master/test/stepup.js)._\n\nstepup exports a single function:\n\n    var $$ = require('stepup')\n    $$(steps, [options], [callback])\n    \nWhich can be used to execute an array of functions or \"steps\"\n\n    $$([\n      function stepOne($) {\n        var valueOne = 'a synchronous value'\n        return valueOne\n      }\n    , function stepTwo($, valueOne) {\n        fs.readFile('someFile.txt', $.first())\n      }\n    , function stepThree($, someFileTxt) {\n        // ...\n      }\n    ])\n    \nThe first argument is the context object, `$`. `$` contains functions for generating callbacks. When all generated callbacks have been called, synchronously or asynchronously, the next step will be called.\n\nNote:\n\n* Any number of callbacks may be generated in a given step.\n* If no callbacks are generated (e.g., a value is returned), the next step will proceed.\n\nAdditionally, there are many types of generator functions\n    \n    $$([\n      function($) {\n        // Pass the first non-error argument\n        $.first()(null, 'firstValue')\n        \n        // Pass all arguments as an array\n        $.collapse()(null, 'collapseA', 'collapseB', 'collapseC')\n        \n        // Pass the first argument from an event (error-less) handler\n        $.event()('eventValue')\n                \n        // Don't pass any arguments\n        $.none()(null, 'noneA', 'noneB')\n        \n        // Don't pass any arguments AND ignore the error value\n        $.ignore()(new Error('Don't care.'), 'ignoreA', 'ignoreB')\n        \n        // Pass all arguments spread across multiple values\n        $.spread()(null, 'spreadA', 'spreadB')\n      }\n    , function($, firstValue, collapseValues, eventValue, spreadA, spreadB) {\n        // collapseValues === ['collapseA', 'collapseB', 'collapseC']\n        \n    \t// Errors will be passed to the callback and remaining steps will be skipped\n    \t$.first()(null, 'This value will never be seen.')\n    \t$.first()(new Error('Pass this to the callback'))\n      }\n    , function ignoredStep($) {\n        // Skipped because error was passed\n      }\n    ], function callback(err) {\n      // err.message === 'Pass this to the callback'\n    })\n    \nThe group generator is convenient for waiting on a set of async calls\n    \n    $$([\n      function($) {\n        var files = ['A.txt', 'B.txt', 'C.txt', 'D.txt']\n        // Create a group generator, type is optional and defaults to 'first'\n        // (e.g., 'first', 'collapse', 'event', 'none', etc...)\n        var group = $.group('first')\n        \n        files.forEach(function(fileName) {\n          // Generate a callback for each file in the list\n          fs.readFile(fileName, group())\n        )\n      }\n    , function($, groupValues) {\n        // ...\n      }\n    ])\n    \n## Error Handling\n\nThe first error is always passed to the callback, with all remaining results, errors, or steps ignored. If you this is undesirable, considering using `$.ignore` or wrapping a callback\n\n    $$([\n      function($) {\n        var next = $.first()\n        \n        fs.readFile(fileName, function(err, data) {\n          // Ignore the error if it exists\n          next(null, data)\n        })\n      }\n      // ...\n    ])\n    \nAdditionally, stepup uses the `trycatch` async try/catch library to catch all errors. To disable, call `$.config({useAsyncTrycatch: false})`\n\n\n## Extras\n\n### $.end    \nUseful for skipping the remaining steps and passing values to the callback\n\n    $$([\n      function($) {\n        if (cachedValue) {\n          return $.end(null, cachedValue)\n        }\n        fs.readFile('someFile.txt', $.first())\n      }\n    , function($, someFileTxt) {\n        // Skipped when cachedValue is truthy\n      }\n    ], callback)\n    \n### $.data\nIs an object useful for storing state across steps\n     \n    $$([\n      function($) {\n        $.data.foo = true\n        fs.readFile('someFile.txt', $.first())\n      }\n    , function($, someFileTxt) {\n        // $.data.foo === true\n      }\n    ], callback)\n    \n### $.run\nIs a convenience function for nesting steps\n\n    $$([\n      function($) {\n        $.run([\n          function(_$) {\n            // ...\n          }\n        , function(_$) {\n            // ...\n          }\n        ], $.first())\n        \n        fs.readFile('someFile.txt', $.first())\n      }\n    , function($, subStepResult, someFileTxt) {\n        // ...\n      }\n    ], callback)\n        \n## Options\n\n### timeout\nUse to guarantee a callback is called after a timeout period\n\n    $$([\n      function($) {\n        var next = $.first()\n\n        setTimeout(function() {\n          next()\n        }, 2000)\n      }\n    , function($) {\n        // Never called because of timeout\n      }\n    ], {timeout: 1000}, callback)",
  "readmeFilename": "README.md",
  "_id": "stepup@1.1.2",
  "dist": {
    "shasum": "9a87178ee1a31566dcea01b9be2696fd212075a8",
    "tarball": "http://registry.npmjs.org/stepup/-/stepup-1.1.2.tgz"
  },
  "_from": "stepup@*",
  "_npmVersion": "1.2.14",
  "_npmUser": {
    "name": "crabdude",
    "email": "atcrabtree@gmail.com"
  },
  "maintainers": [
    {
      "name": "crabdude",
      "email": "dude@noderiety.com"
    }
  ],
  "_shasum": "9a87178ee1a31566dcea01b9be2696fd212075a8",
  "_resolved": "https://registry.npmjs.org/stepup/-/stepup-1.1.2.tgz"
}
